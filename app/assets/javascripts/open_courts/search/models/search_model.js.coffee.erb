class OpenCourts.SearchModel extends Backbone.AbstractModel
  @include Util.Logger
  @include Util.Model.Attributes

  # TODO: rename fulltext to q
  defaults:
    q:                   []
    page:                []
    judges:              []
    court:               []
    date:                []
    form:                []
    nature:              []
    legislation_area:    []
    legislation_subarea: []
    historical:          [false]

  initialize: ->
    @.log 'Initializing ...'

    @page = 1

    @.log 'Initialized.'

  getFulltext: (value) ->
    @.getValue('q')

  setFulltext: (value) ->
    @.setValue('q', value)

  getPage: ->
    @.getValue('page')

  setPage: (value) ->
    value = 1 unless value

    @.setValue('page', value)

  getHistorical: ->
    if @.getValue('historical') == "true" then true else false

  setHistorical: (value) ->
    @.setValue('historical', value.toString())

  query: ->
    type: @type, data: @.toJSON()

  search: (callback) ->
    $.ajax
      url: "/search"
      type: "GET"
      dataType: 'json'
      data:
        @.query()
      success: (response) =>
        @facets = response.facets

        @.log "Response: #{@.inspect response}"

        callback?(response)
      error: (error) =>
        @.err "Error occured while searching (model=#{@.toJSON()})"

        # dirty fix for server errors
        document.write(error.responseText)

  values: (field) ->
    @facets?[field]?.map (facet) -> facet.value

  filterFacets: (field, value) ->
    (@facets?[field].filter (e) -> e.value == value)?[0]

  facet: (field, value) ->
    @.filterFacets(field, value)?.count

  label: (field, value) ->
    @.filterFacets(field, value)?.alias
