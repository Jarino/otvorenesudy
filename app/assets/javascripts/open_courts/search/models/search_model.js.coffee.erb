class OpenCourts.SearchModel extends Backbone.AbstractModel
  @include Logger
  @include Model.Attributes

  defaults:
    page:  [1]
    sort:  ['date']
    order: ['desc']

  initialize: ->
    @.log 'Initializing ...'

    @page = 1

    @.log 'Initialized.'

  getPage: ->
    @.getValue('page') or 1

  setPage: (value, options) ->
    value = 1 if !value or isNaN(value)

    @.setValue('page', value, options)

  getSort: ->
    @.getValue('sort')

  setSort: (value) ->
    @.setValue('sort', value)

  getOrder: ->
    @.getValue('order')

  setOrder: (value) ->
    @.setValue('order', value)

  query: ->
    type: @type, data: @.toJSON()

  search: (callback) ->
    $.ajax
      url: "/search"
      type: "GET"
      dataType: 'json'
      data:
        @.query()
      success: (response) =>
        @facets = response.facets

        @.log "Response: #{@.inspect response}"

        callback?(response)
      error: (error) =>
        @.err "Error occured while searching (model=#{@.toJSON()})"

        # dirty fix for server errors
        document.write(error.responseText)

  values: (field) ->
    @facets?[field]?.map (facet) -> facet.value

  filterFacets: (field, value) ->
    (@facets?[field].filter (e) -> e.value == value)?[0]

  facet: (field, value) ->
    @.filterFacets(field, value)?.count

  label: (field, value) ->
    @.filterFacets(field, value)?.alias
